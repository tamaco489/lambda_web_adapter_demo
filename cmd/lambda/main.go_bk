package main

import (
	"bytes"
	"context"
	"net/http"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/gin-gonic/gin"
	"github.com/serverless_web_api/config"
	"github.com/serverless_web_api/handler"
)

// Web Adapterを使わない実装、ALBのリクエストイベントを受け取り、専用のレスポンスイベントを返す処理を入れる必要がある

type ResponseWriter struct {
	Body       bytes.Buffer
	StatusCode int
	Headers    http.Header
}

func (rw *ResponseWriter) Write(data []byte) (int, error) {
	return rw.Body.Write(data)
}

func (rw *ResponseWriter) WriteHeader(statusCode int) {
	rw.StatusCode = statusCode
}

func (rw *ResponseWriter) Header() http.Header {
	return rw.Headers
}

func albHandler(ctx context.Context, req events.ALBTargetGroupRequest) (events.ALBTargetGroupResponse, error) {
	gin.SetMode(config.EnvConfig.RunMode)
	g := handler.InitRouter()

	httpReq, _ := http.NewRequest(req.HTTPMethod, req.Path, bytes.NewBufferString(req.Body))
	for key, value := range req.Headers {
		httpReq.Header[key] = []string{value}
	}

	writer := &ResponseWriter{Body: bytes.Buffer{}, Headers: make(http.Header)}
	convertedHeaders := make(map[string]string)
	for key, values := range writer.Headers {
		if len(values) > 0 {
			convertedHeaders[key] = values[0]
		}
	}

	g.ServeHTTP(writer, httpReq)

	return events.ALBTargetGroupResponse{
		StatusCode:      writer.StatusCode,
		Headers:         convertedHeaders,
		Body:            writer.Body.String(),
		IsBase64Encoded: false,
	}, nil
}

func main() {
	lambda.Start(albHandler)
}
